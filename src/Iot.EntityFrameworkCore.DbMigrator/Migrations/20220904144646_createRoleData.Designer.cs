// <auto-generated />
using System;
using Iot.EntityFrameworkCore.DbMigrator.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iot.EntityFrameworkCore.Dbmigrator.Migrations
{
    [DbContext(typeof(IotMigrationsDbContext))]
    [Migration("20220904144646_createRoleData")]
    partial class createRoleData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.MenuRoleFunction", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("MenuId", "RoleId");

                    b.ToTable("menuRoleFunctions", (string)null);

                    b.HasComment("菜单角色配置");
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.UserRoleFunction", b =>
                {
                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInfoId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserInfoId", "RoleId");

                    b.ToTable("UserRoleFunctions", (string)null);

                    b.HasComment("用户角色配置");
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus", (string)null);

                    b.HasComment("菜单权限控制");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72745051-a07d-4d9e-8fcb-8b3188040b5a"),
                            Component = "@/pages/home/index",
                            ConcurrencyStamp = "38fa5f7cfed34da9a7c8540f1d9f4d4f",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1170),
                            ExtraProperties = "{}",
                            Icon = "HomeOutlined",
                            Index = 0,
                            IsDeleted = false,
                            Name = "首页",
                            Path = "/",
                            Title = "首页"
                        },
                        new
                        {
                            Id = new Guid("bb72fac0-1d4f-408b-b7e6-248594514f38"),
                            Component = "",
                            ConcurrencyStamp = "003f71409f6f43c8bff3eacfb4f09d13",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1175),
                            ExtraProperties = "{}",
                            Icon = "SettingOutlined",
                            Index = 1,
                            IsDeleted = false,
                            Name = "权限管理",
                            Path = "/authority",
                            Title = "权限管理"
                        },
                        new
                        {
                            Id = new Guid("af0a92e5-86ed-4d57-905f-c9765e5e0f9e"),
                            Component = "@/pages/authority/roles/index",
                            ConcurrencyStamp = "1604c7258daf48929c138377aa5855d7",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1185),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "角色管理",
                            ParentId = new Guid("bb72fac0-1d4f-408b-b7e6-248594514f38"),
                            Path = "/authority/role",
                            Title = "角色管理"
                        },
                        new
                        {
                            Id = new Guid("02256adc-9797-4a82-836e-50119661662b"),
                            Component = "@/pages/authority/users/index",
                            ConcurrencyStamp = "a9f4f7939ad04ca08c169840abb08576",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1189),
                            ExtraProperties = "{}",
                            Index = 1,
                            IsDeleted = false,
                            Name = "用户管理",
                            ParentId = new Guid("bb72fac0-1d4f-408b-b7e6-248594514f38"),
                            Path = "/authority/user",
                            Title = "用户管理"
                        },
                        new
                        {
                            Id = new Guid("efca255d-bbc2-46d4-a28f-6b9f8b35a617"),
                            Component = "@/pages/authority/menus/index",
                            ConcurrencyStamp = "f8766a897e344567a34fa293606be746",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1193),
                            ExtraProperties = "{}",
                            Index = 2,
                            IsDeleted = false,
                            Name = "菜单管理",
                            ParentId = new Guid("bb72fac0-1d4f-408b-b7e6-248594514f38"),
                            Path = "/authority/menu",
                            Title = "菜单管理"
                        },
                        new
                        {
                            Id = new Guid("417e578a-48fe-41b6-a60d-21cffbd99328"),
                            ConcurrencyStamp = "11d03668a9dc4cacb00dc19f3787b27d",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1197),
                            ExtraProperties = "{}",
                            Icon = "DashboardOutlined",
                            Index = 2,
                            IsDeleted = false,
                            Name = "设备",
                            Path = "/devices",
                            Title = "设备"
                        },
                        new
                        {
                            Id = new Guid("67a38722-ad2b-4693-b767-1a8bbd026a7f"),
                            Component = "@/pages/devices/template/index",
                            ConcurrencyStamp = "66c4de51e2f1470588f80d8bfe6966fb",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1203),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "设备模板",
                            ParentId = new Guid("417e578a-48fe-41b6-a60d-21cffbd99328"),
                            Path = "/devices/template",
                            Title = "设备模板"
                        },
                        new
                        {
                            Id = new Guid("98c36e51-4b78-4690-b170-68e14304f0ae"),
                            Component = "@/pages/devices/admin/index",
                            ConcurrencyStamp = "d9f7a17c1c734c549b8726aa24bdf270",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1207),
                            ExtraProperties = "{}",
                            Index = 1,
                            IsDeleted = false,
                            Name = "设备管理",
                            ParentId = new Guid("417e578a-48fe-41b6-a60d-21cffbd99328"),
                            Path = "/devices/admin",
                            Title = "设备管理"
                        });
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("上一级id");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("备注");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasComment("角色");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1d3806f-a432-4e38-91e0-6823148e0ed2"),
                            Code = "admin",
                            ConcurrencyStamp = "cf04189a00a64a50b50fd6293b09169d",
                            CreationTime = new DateTime(2022, 9, 4, 22, 46, 46, 374, DateTimeKind.Local).AddTicks(1094),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "管理员",
                            Remark = "系统管理员"
                        });
                });

            modelBuilder.Entity("Iot.Device.Devices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stats")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.HasIndex("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("IotDevices", (string)null);

                    b.HasComment("设备信息");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ec20660-d276-40f1-bcca-f446207356ca"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceTemplateId = new Guid("45784583-83f4-40ea-a95e-19ddb411fe3b"),
                            IsDeleted = false,
                            Remark = "",
                            Stats = 1,
                            UserInfoId = new Guid("8749ca90-555c-4b4a-b974-c520b5b4766a")
                        });
                });

            modelBuilder.Entity("Iot.Devices.DeviceRunLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Id");

                    b.ToTable("DeviceRunLogs", (string)null);

                    b.HasComment("设备运行信息");
                });

            modelBuilder.Entity("Iot.Devices.DeviceTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("图标");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("模板名称");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("备注");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("类型");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("用户id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTemplates", (string)null);

                    b.HasComment("设备模板");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45784583-83f4-40ea-a95e-19ddb411fe3b"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Icon = "https://tokeniot.oss-cn-shenzhen.aliyuncs.com/icon/Dht.png",
                            IsDeleted = false,
                            Name = "温度计",
                            Remark = "",
                            Type = 0,
                            UserId = new Guid("8749ca90-555c-4b4a-b974-c520b5b4766a")
                        });
                });

            modelBuilder.Entity("Iot.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("账号");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("头像");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Introduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("昵称");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("密码");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("手机号");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasComment("账号状态");

                    b.Property<string>("WeChatOpenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WeChatOpenId");

                    b.HasIndex("AccountNumber", "Password");

                    b.ToTable("IotUserInfo", (string)null);

                    b.HasComment("用户信息");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8749ca90-555c-4b4a-b974-c520b5b4766a"),
                            AccountNumber = "admin",
                            Avatar = "https://xiaohuchat.oss-cn-beijing.aliyuncs.com/ima/admin.jpg",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduce = "超级管理员",
                            IsDeleted = false,
                            Name = "管理员",
                            Password = "dd666666",
                            PhoneNumber = "13049809673",
                            State = 0
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)")
                        .HasColumnName("ApplicationName");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("BrowserInfo");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ClientIpAddress");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ClientName");

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Comments");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("CorrelationId");

                    b.Property<string>("Exceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("HttpMethod");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImpersonatorTenantId");

                    b.Property<string>("ImpersonatorTenantName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ImpersonatorTenantName");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImpersonatorUserId");

                    b.Property<string>("ImpersonatorUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ImpersonatorUserName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("TenantName");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuditLogId");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExecutionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("MethodName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("MethodName");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Parameters");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ServiceName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuditLogId");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ChangeTime");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChangeType");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("EntityId");

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("EntityTypeFullName");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("NewValue");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OriginalValue");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PropertyName");

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PropertyTypeFullName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");

                    b.ToTable("AbpFeatureValues", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");

                    b.ToTable("AbpSettings", (string)null);
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.MenuRoleFunction", b =>
                {
                    b.HasOne("Iot.Auth.Domain.Roles.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iot.Auth.Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.UserRoleFunction", b =>
                {
                    b.HasOne("Iot.Auth.Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iot.Users.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Iot.Device.Devices", b =>
                {
                    b.HasOne("Iot.Devices.DeviceTemplate", "DeviceTemplate")
                        .WithMany()
                        .HasForeignKey("DeviceTemplateId");

                    b.HasOne("Iot.Users.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");

                    b.Navigation("DeviceTemplate");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Iot.Devices.DeviceTemplate", b =>
                {
                    b.HasOne("Iot.Users.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
