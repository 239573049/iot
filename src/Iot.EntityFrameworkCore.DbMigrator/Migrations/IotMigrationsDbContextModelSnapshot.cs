// <auto-generated />
using System;
using Iot.EntityFrameworkCore.DbMigrator.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iot.EntityFrameworkCore.Dbmigrator.Migrations
{
    [DbContext(typeof(IotMigrationsDbContext))]
    partial class IotMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.MenuRoleFunction", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("MenuId", "RoleId");

                    b.ToTable("menuRoleFunctions", (string)null);

                    b.HasComment("菜单角色配置");

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("0c910427-8cc9-43a7-a858-47a621ef10b6"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("15128746-57a8-4b11-8277-d569b5b75b6e"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("5b543c93-79ea-48b7-80b0-c0afb7d711dd"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("d2477d81-2a9e-42e3-806d-4f76e927e07d"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("1c635748-1356-49e3-864d-988e9314fc2e"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("6e06b631-b9c4-4b55-a51c-a4d4e0445489"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("407c09a8-9fd5-43ab-a997-1b2f991f4dc4"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("c7887295-3787-46a2-bc48-b370e5f5a3b1"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        },
                        new
                        {
                            MenuId = new Guid("0c3d278a-361e-4432-8b7b-014131c1469a"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        });
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.UserRoleFunction", b =>
                {
                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInfoId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserInfoId", "RoleId");

                    b.ToTable("UserRoleFunctions", (string)null);

                    b.HasComment("用户角色配置");

                    b.HasData(
                        new
                        {
                            UserInfoId = new Guid("4754a271-42d5-4e0d-8298-41b19dd00ab3"),
                            RoleId = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1")
                        });
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus", (string)null);

                    b.HasComment("菜单权限控制");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c910427-8cc9-43a7-a858-47a621ef10b6"),
                            Component = "@/pages/home/index",
                            ConcurrencyStamp = "38f55aea074d43daa96db327b82780c2",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(533),
                            ExtraProperties = "{}",
                            Icon = "HomeOutlined",
                            Index = 0,
                            IsDeleted = false,
                            Name = "首页",
                            Path = "/admin",
                            Title = "首页"
                        },
                        new
                        {
                            Id = new Guid("15128746-57a8-4b11-8277-d569b5b75b6e"),
                            Component = "",
                            ConcurrencyStamp = "167086df923a468aaaf2b457df4453ab",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(538),
                            ExtraProperties = "{}",
                            Icon = "SettingOutlined",
                            Index = 1,
                            IsDeleted = false,
                            Name = "权限管理",
                            Path = "/authority",
                            Title = "权限管理"
                        },
                        new
                        {
                            Id = new Guid("5b543c93-79ea-48b7-80b0-c0afb7d711dd"),
                            Component = "@/pages/authority/roles/index",
                            ConcurrencyStamp = "60ee635496d643a4a2c65564bc615e35",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(542),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "角色管理",
                            ParentId = new Guid("15128746-57a8-4b11-8277-d569b5b75b6e"),
                            Path = "/authority/role",
                            Title = "角色管理"
                        },
                        new
                        {
                            Id = new Guid("d2477d81-2a9e-42e3-806d-4f76e927e07d"),
                            Component = "@/pages/authority/users/index",
                            ConcurrencyStamp = "4b9e0700bd17469493e593771ce096a1",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(549),
                            ExtraProperties = "{}",
                            Index = 1,
                            IsDeleted = false,
                            Name = "用户管理",
                            ParentId = new Guid("15128746-57a8-4b11-8277-d569b5b75b6e"),
                            Path = "/authority/user",
                            Title = "用户管理"
                        },
                        new
                        {
                            Id = new Guid("1c635748-1356-49e3-864d-988e9314fc2e"),
                            Component = "@/pages/authority/menus/index",
                            ConcurrencyStamp = "c982872fbfa34f2483271c37f6ac1611",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(552),
                            ExtraProperties = "{}",
                            Index = 2,
                            IsDeleted = false,
                            Name = "菜单管理",
                            ParentId = new Guid("15128746-57a8-4b11-8277-d569b5b75b6e"),
                            Path = "/authority/menu",
                            Title = "菜单管理"
                        },
                        new
                        {
                            Id = new Guid("6e06b631-b9c4-4b55-a51c-a4d4e0445489"),
                            ConcurrencyStamp = "565ebc19823f4ed6b728d0b61c04d60d",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(556),
                            ExtraProperties = "{}",
                            Icon = "DashboardOutlined",
                            Index = 2,
                            IsDeleted = false,
                            Name = "设备",
                            Path = "/devices",
                            Title = "设备"
                        },
                        new
                        {
                            Id = new Guid("407c09a8-9fd5-43ab-a997-1b2f991f4dc4"),
                            Component = "@/pages/devices/template/index",
                            ConcurrencyStamp = "a2962eab14894040b510499bc933986b",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(559),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "设备模板",
                            ParentId = new Guid("6e06b631-b9c4-4b55-a51c-a4d4e0445489"),
                            Path = "/devices/template",
                            Title = "设备模板"
                        },
                        new
                        {
                            Id = new Guid("0c3d278a-361e-4432-8b7b-014131c1469a"),
                            Component = "@/pages/devices/admin/index",
                            ConcurrencyStamp = "df21e3b2731743d1a65f38bb7c1e60f2",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(569),
                            ExtraProperties = "{}",
                            Index = 2,
                            IsDeleted = false,
                            Name = "设备管理",
                            ParentId = new Guid("6e06b631-b9c4-4b55-a51c-a4d4e0445489"),
                            Path = "/devices/admin",
                            Title = "设备管理"
                        },
                        new
                        {
                            Id = new Guid("c7887295-3787-46a2-bc48-b370e5f5a3b1"),
                            Component = "@/pages/devices/running-log/index",
                            ConcurrencyStamp = "48312c1a7d094636aa151c381623f702",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(565),
                            ExtraProperties = "{}",
                            Index = 1,
                            IsDeleted = false,
                            Name = "设备运行日志",
                            ParentId = new Guid("6e06b631-b9c4-4b55-a51c-a4d4e0445489"),
                            Path = "/devices/running-log",
                            Title = "设备运行日志"
                        });
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("上一级id");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("备注");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasComment("角色");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc6fc3f6-ca81-4df1-ae3c-2a199178f7d1"),
                            Code = "admin",
                            ConcurrencyStamp = "14a42a8af7ff43039cfab1cc444000c2",
                            CreationTime = new DateTime(2022, 9, 12, 23, 44, 27, 359, DateTimeKind.Local).AddTicks(447),
                            ExtraProperties = "{}",
                            Index = 0,
                            IsDeleted = false,
                            Name = "管理员",
                            Remark = "系统管理员"
                        });
                });

            modelBuilder.Entity("Iot.Device.DeviceRunLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Id");

                    b.ToTable("DeviceRunLogs", (string)null);

                    b.HasComment("设备运行信息");
                });

            modelBuilder.Entity("Iot.Device.Devices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("DeviceTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stats")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.HasIndex("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("IotDevices", (string)null);

                    b.HasComment("设备信息");
                });

            modelBuilder.Entity("Iot.Device.TreeDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("TreeDevices", (string)null);

                    b.HasComment("设备树形");
                });

            modelBuilder.Entity("Iot.Devices.DeviceTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("图标");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("模板名称");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("备注");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("类型");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("用户id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceTemplates", (string)null);

                    b.HasComment("设备模板");
                });

            modelBuilder.Entity("Iot.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("账号");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("头像");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Introduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("昵称");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("密码");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("手机号");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasComment("账号状态");

                    b.Property<string>("WeChatOpenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WeChatOpenId");

                    b.HasIndex("AccountNumber", "Password");

                    b.ToTable("IotUserInfo", (string)null);

                    b.HasComment("用户信息");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4754a271-42d5-4e0d-8298-41b19dd00ab3"),
                            AccountNumber = "admin",
                            Avatar = "https://xiaohuchat.oss-cn-beijing.aliyuncs.com/ima/admin.jpg",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduce = "超级管理员",
                            IsDeleted = false,
                            Name = "管理员",
                            Password = "dd666666",
                            PhoneNumber = "13049809673",
                            State = 0
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)")
                        .HasColumnName("ApplicationName");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("BrowserInfo");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ClientIpAddress");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ClientName");

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Comments");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("CorrelationId");

                    b.Property<string>("Exceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("HttpMethod");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImpersonatorTenantId");

                    b.Property<string>("ImpersonatorTenantName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ImpersonatorTenantName");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImpersonatorUserId");

                    b.Property<string>("ImpersonatorUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ImpersonatorUserName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("TenantName");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuditLogId");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExecutionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("MethodName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("MethodName");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Parameters");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ServiceName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuditLogId");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ChangeTime");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChangeType");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("EntityId");

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("EntityTypeFullName");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("NewValue");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OriginalValue");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PropertyName");

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PropertyTypeFullName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");

                    b.ToTable("AbpFeatureValues", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique()
                        .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");

                    b.ToTable("AbpSettings", (string)null);
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.MenuRoleFunction", b =>
                {
                    b.HasOne("Iot.Auth.Domain.Roles.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iot.Auth.Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Iot.Auth.Domain.Roles.Functions.UserRoleFunction", b =>
                {
                    b.HasOne("Iot.Auth.Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Iot.Device.Devices", b =>
                {
                    b.HasOne("Iot.Devices.DeviceTemplate", "DeviceTemplate")
                        .WithMany()
                        .HasForeignKey("DeviceTemplateId");

                    b.HasOne("Iot.Users.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");

                    b.Navigation("DeviceTemplate");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Iot.Devices.DeviceTemplate", b =>
                {
                    b.HasOne("Iot.Users.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
